openapi: 3.0.0
info:
  title: AI Response and People Extraction API
  version: 1.0.0
  description: API endpoints to determine if an AI response is hallucinated and to extract people information from URLs.
servers:
  - url: https://api.repromptai.com
paths:
  /api/v1/isHallucinated:
    post:
      summary: Check if the AI-generated response is hallucinated
      operationId: isHallucinatedCheck
      tags:
        - Hallucination Check
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  description: The original prompt given to the AI.
                response:
                  type: string
                  description: The AI-generated response to the prompt.
                userInput:
                  type: string
                  description: Optional user input that might contextualize the response.
                debug:
                  type: boolean
                  description: Flag to indicate if the operation should be run in debug mode.
              required:
                - prompt
                - response
      responses:
        '200':
          description: Successfully determined the hallucination status of the response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  isHallucinated:
                    type: boolean
                    example: false
                  isBadResponse:
                    type: boolean
                    example: false
                  reasoning:
                    type: string
                    example: The response references information outside of the context, and also does not answer the user's request
        '400':
          description: Bad request, when required fields are missing or the API key is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Prompt and response are required
        '401':
          description: Unauthorized, when the API key is missing or invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: API key is missing
      security:
        - ApiKeyAuth: []


  /test:
    get:
      summary: Retrieve all people extractions or a specific extraction by ID
      operationId: getPeopleExtractions
      tags:
        - People Extraction
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: Unique ID of the extraction to retrieve a specific record.
      responses:
        '200':
          description: Successfully retrieved the extraction(s).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: unique-extraction-id
                  url:
                    type: string
                    example: http://example.com
                  result:
                    type: object
                    properties:
                      name:
                        type: string
                        example: John Doe
                      department:
                        type: string
                        example: Finance
                      telephone:
                        type: string
                        example: 123-456-7890
                      email:
                        type: string
                        example: john.doe@example.com
        '404':
          description: Extraction not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Extraction not found
    post:
      summary: Create a new people extraction from a URL
      operationId: createPeopleExtraction
      tags:
        - People Extraction
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: The URL from which to extract people information.
                include_sources:
                  type: boolean
                  description: Flag to include source information in the extraction.
            example:
              url: "https://reveille.io/pages/founder"
      responses:
        '200':
          description: Successfully created the people extraction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "e1f131c57b14a90270f274f5827b6fa5c7ae3a0bc50d4273fb514342424e41c5"
                  url:
                    type: string
                    example: "https://reveille.io/pages/founder"
                  result:
                    type: object
                    properties:
                      people:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              example: "Calvin Harris"
                            department:
                              type: string
                              example: "Founder and Managing Director"
                            telephone:
                              type: string
                              example: "8573488948"
                            email:
                              type: string
                              example: "support@reveille.io"
                            reasoning:
                              type: object
                              properties:
                                relevant_text_fragments:
                                  type: array
                                  items:
                                    type: string
                                who_is_person:
                                  type: string
                                why_is_person:
                                  type: string
                                why_is_not_person:
                                  type: string
                            source:
                              type: object
                              properties:
                                url:
                                  type: string
                                timestamp:
                                  type: string
                                  format: date-time
                  hallucination_check:
                    type: object
                    properties:
                      isHallucinated:
                        type: boolean
                        example: false
                      isBadResponse:
                        type: boolean
                        example: false
                      reasoning:
                        type: string
                  sources:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                        text:
                          type: string
                        html:
                          type: string

  /api/v1/assessments/matador-send-to-human:
    post:
      summary: assessments/matador-send-to-human
      operationId: sendToHuman
      tags:
        - Matador
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                last_user_message:
                  type: string
                chat_history:
                  type: string
                  format: json
                  description: The entire chat history as a JSON string, including the system prompt.
                gpt_message:
                  type: string
                organization_id:
                  type: string
                  description: Dealer organization ID
                message_id:
                  type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version:
                    type: number
                    example: 2
                    description: The version of the API
                  needs_human_review:
                    type: boolean
                    description: Does the message need human review? If no, we don't need to send to Superhuman
                  needs_reply:
                    type: boolean
                    description: Does the message need a reply? If False, we can discard it
                  override_reason:
                    type: string
                    example: NOT_OVERRIDDEN
                    description: Why we overrode the classification results. If overridden, we'll send True for both needs_human_review and needs_reply. If NOT_OVERRIDDEN, needs_human_review and needs_reply will respect the classification_results
                  classification_results:
                    type: object
                    description: The actual classification results, regardless of whether they're overridden
                    properties:
                      needs_human_review:
                        type: object
                        properties:
                          response:
                            type: boolean
                          reasoning:
                            type: string
                            example: Customer is asking to negotiate on $3500 trade-in. Needs dealer or SH review
                      needs_reply:
                        type: object
                        properties:
                          response:
                            type: boolean
                          reasoning:
                            type: string
                            example: N/A Needs Human Review
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: array
                          items:
                            type: string
                        message:
                          type: string
        '401':
          description: Unauthorized. Organization not found for the provided API key
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/v1/srq/uploadAndClassify:
    post:
      summary: Upload and classify SRQ document
      operationId: uploadAndClassify
      tags:
        - SRQ
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: 
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file to be uploaded and classified.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: string
                    description: A short summary of the document.
                  predicted_docket_code:
                    type: string
                    description: The predicted docket code for the document.
                  generated_title:
                    type: string
                    description: The generated title of the document.
                  generated_explanation:
                    type: string
                    description: Explanation of why the document deserves this code.
                  top_3_possible_docket_codes:
                    type: array
                    items:
                      type: string
                    description: Top 3 possible docket codes.
                  fileName:
                    type: string
                    description: The name of the uploaded file.
                  fileType:
                    type: string
                    description: The type of the uploaded file.
                  pages:
                    type: integer
                    description: The number of pages in the document.
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized. Organization not found for the provided API key
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  securitySchemes:
    ApiKeyAuth:  # Name of the security scheme
      type: apiKey
      in: header  # Can be "header", "query" or "cookie"
      name: apiKey  # Name of the header, query parameter or cookie
